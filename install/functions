#!/bin/bash 

#----
## @Synopsis	This file contains functions to be used by Centreon install scripts
## @Copyright	Copyright 2008, Guillaume Watteeux
## @Licence	GPLv2
## This file contains functions to be used by Centreon install scripts
#----

#################################
# SVN: $Id: functions 6889 2008-10-22 20:56:21Z watt $

# debug ?
#set -x

## VARS
yes="y"
no="n"
ok="OK"
fail="FAIL"
passed="PASSED"
warning="WARNING"
critical="CRITICAL"
# Init binary to empty to use pathfind or manual define
GREP=""
CAT=""
SED=""
CHMOD=""
CHOWN=""

## COLOR FUNCTIONS

RES_COL="60"
MOVE_TO_COL="\\033[${RES_COL}G"
SETCOLOR_INFO="\\033[1;38m"
SETCOLOR_SUCCESS="\\033[1;32m"
SETCOLOR_FAILURE="\\033[1;31m"
SETCOLOR_WARNING="\\033[1;33m"
SETCOLOR_NORMAL="\\033[0;39m"

#----
## print info message
## add info message to log file
## @param	message info
## @param	type info (ex: INFO, username...)
## @Stdout	info message
## @Globals	LOG_FILE
#----
function echo_info() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_INFO}${2}${SETCOLOR_NORMAL}" 
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print success message
## add success message to log file
## @param	message
## @param	word to specify success (ex: OK)
## @Stdout	success message
## @Globals	LOG_FILE
#----
function echo_success() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_SUCCESS}${2}${SETCOLOR_NORMAL}" 
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print failure message
## add failure message to log file
## @param	message
## @param	word to specify failure (ex: fail)
## @Stdout	failure message
## @Globals	LOG_FILE
#----
function echo_failure() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_FAILURE}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print passed message
## add passed message to log file
## @param	message
## @param	word to specify pass (ex: passed)
## @Stdout	passed message
## @Globals	LOG_FILE
#----
function echo_passed() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_WARNING}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## print warning message
## add warning message to log file
## @param	message
## @param	word to specify warning (ex: warn)
## @Stdout	warning message
## @Globals	LOG_FILE
#----
function echo_warning() {
    echo -e "${1}${MOVE_TO_COL}${SETCOLOR_WARNING}${2}${SETCOLOR_NORMAL}"
    echo -e "$1 : $2" >> $LOG_FILE
}

#----
## add message on log file
## @param	type of message level (debug, info, ...)
## @param	message
## @Globals	LOG_FILE
#----
function log() {
	local program="$0"
	local type="$1"
	shift
	local message="$@"
	echo -e "[$program]:$type: $message" >> $LOG_FILE
}


# FUNCTIONS
#----
## find in $PATH if binary exist
## @param	file to test
## @return 0	found
## @return 1	not found
## @Globals	PATH
#----
function pathfind() {
	OLDIFS="$IFS"
	IFS=:
	for p in $PATH; do
		if [ -x "$p/$*" ]; then
			IFS="$OLDIFS"
			return 0
		fi
	done
	IFS="$OLDIFS"
	return 1
}

#----
## find in $PATH if binary exist and return dirname
## @param	file to test
## @param	global variable to set a result
## @return 0	found
## @return 1	not found
## @Globals	PATH
#----
function pathfind_ret() {
	local bin=$1
	local var_ref=$2
	local OLDIFS="$IFS"
	IFS=:
	for p in $PATH; do
		if [ -x "$p/$bin" ]; then
			IFS="$OLDIFS"
			eval $var_ref=$p
			return 0
		fi
	done
	IFS="$OLDIFS"
	return 1
}

#----
## define a specific variables for grep,cat,sed,... binaries
## This functions was been use in first line on your script
## @return 0	All is't ok
## @return 1	problem with one variable
## @Globals	GREP, CAT, SED, CHMOD, CHOWN
#----
function define_specific_binary_vars() {
	local vars_bin="GREP CAT SED CHMOD CHOWN"
	local var_bin_tolower=""
	for var_bin in $vars_bin ; do
		if [ -z $(eval echo \$$var_bin) ] ; then
			var_bin_tolower="$(echo $var_bin | tr [:upper:] [:lower:])"
			pathfind_ret "$var_bin_tolower" "$(echo -n $var_bin)"
			if [ "$?" -eq 0 ] ; then
				eval "$var_bin='$(eval echo \$$var_bin)/$var_bin_tolower'"
				export $(echo $var_bin)
				log "INFO" "$var_bin=$(eval echo \$$var_bin)"
			else
				return 1
			fi
		fi
	done
	return 0
}

#----
## make a question with yes/no possiblity
## use "no" response by default
## @param	message to print
## @param 	default response (default to no)
## @return 0 	yes
## @return 1 	no
#----
function yes_no_default() {
	local message=$1
	local default=${2:-$no}
	local res="not_define"
	while [ "$res" != "$yes" ] && [ "$res" != "$no" ] && [ ! -z "$res" ] ; do
		echo -e "\n$message\[y/n], default to [$default]:"
		echo -en "> "
		read res
		[ -z "$res" ] && res="$default"
	done
	if [ "$res" = "$yes" ] ; then 
		return 0
	else 
		return 1
	fi
}

#----
## print a message, test directory if answer is correct 
## Loop if not a valid directory
## @param	message
## @param	default value (use "NO_DEFAULT" if not default value)
## @param	global variable to set a result
## @return 0	end
#----
function answer_with_testdir() {
	local message=$1
	local default=$2
	local var_ref=$3
	local res="not_define"
	local first=0
	while [ ! -d "$res" ] ; do
		[ $first -eq 1 ] && echo_passed "$res is not a directory or does not exist." "$critical" 
		echo -e "\n$message"
		[ "$default" != "NO_DEFAULT" ] && echo -e "default to [$default]"
		echo -en "> "
		read res
		if [ -z "$res" ] ; then 
			[ $default != "NO_DEFAULT" ] && res=$default
		fi
		if [ -z ${res#/} ] ; then
			echo_passed  "You select slash..."
			res="not_define"
		else
			first=1
		fi
	done
	eval $var_ref=$res
	return 0
}

#----
## print a message, create directory with answer 
## Loop if not a valid directory (slash...)
## @param	message
## @param	default value (use "NO_DEFAULT" if not default value)
## @param	global variable to set a result
## @return 0	end
#----
function answer_with_createdir() {
	local message=$1
	local default=$2
	local var_ref=$3
	local res="not_define"
	local first=0
	while [ ! -d "$res" ] ; do
		[ $first -eq 1 ] && echo_passed "Directory $res does not exists." "$critical"
		echo -e "\n$message"
		[ "$default" != "NO_DEFAULT" ] && echo -e "default to [$default]"
		echo -en "> "
		read res
		if [ -z "$res" ] ; then
			[ "$default" != "NO_DEFAULT" ] && res=$default
		fi
		if [ -z "${res#/}" -o "$yes" = "$res" -o "$no" = "$res" ] ; then
			echo_passed  "You select slash..."
			res="not_define"
		else 
			first=1
			[ -d "$res" ] && break 
			yes_no_default "Do you want me to create this directory ? [$res]"
			if [ $? -eq 0 ] ; then
				mkdir -p $res
				if [ $? -ne 0 ] ; then
					echo_passed "Could not create directory." "$critical"
					#continue
				fi
				log "INFO" "Creating : $res"
			fi
		fi
	done
	eval $var_ref=$res
	return 0
}

#----
## print a message, test if file exists 
## Loop if not a valid file 
## @param	message
## @param	default value (use "NO_DEFAULT" if not default value)
## @param	global variable to set a result
## @return 0	end
#----
function answer_with_testfile() {
	local message=$1
	local default=$2
	local var_ref=$3
	local res="not_define"
	local first=0
	while [ ! -f "$res" ] ; do
		[ $first -eq 1 ] && echo_passed "$res is not a valid file." "$critical" 
		echo -e "\n$message"
		[ "$default" != "NO_DEFAULT" ] && echo -e "default to [$default]"
		echo -en "> "
		read res
		if [ -z "$res" ] ; then 
			[ "$default" != "NO_DEFAULT" ] && res=$default
		fi
		first=1
	done
	eval $var_ref=$res
	return 0
}

#----
## Test if file exist
## @param	file
## @param	variable to reset
## @return 0 	file exist
## @return 1 	file does not exist
#----
function testfile_clean() {
	local file="$1"
	local var="$2"
	[ -z "$file" ] && return 1
	if [ ! -e "$file" ] ; then
		eval $var=""
		return 1
	else 
		return 0
	fi
}

#----
## Test if directory exist
## @param	directory
## @param	variable to reset
## @return 0 directory exist
## @return 1 directory does not exist
#----
function testdir_clean() {
	local dir="$1"
	local var="$2"
	[ -z "$dir" ] && return 1
	if [ ! -d "$dir" ] ; then
		eval $var=""
		return 1
	else
		return 0
	fi
}

function test_answer() {
	if [ ! -z $2 ] ; then
		if [ $2 != "" ] ; then
			eval $1=$2
		fi
	fi
}

#----
## use to select a data on array 
## set to a variable a result of chose
## @param	variable to set a resutl
## @param	List of possiblity to chose
## @return 0	end
#----
function select_in_array() {
	local variable=$1
	shift
	local array=($@)
	local res=1
	local count=0
	local first=0
	while [ $res -gt $count ] ; do
		[ $first -eq 1 ] && echo_failure "\$res is not a valid response." "$critical" 
		count=0
		local limit=${#array[@]}
		for (( datas=0; datas < limit; datas++ )) ; do
			echo -e "\t$datas:\t${array[$datas]}"
			let "count += 1" 
		done
		echo -en "> "
		read res
		first=1
		if [ $res -eq $res 2>/dev/null ] ; then
			echo " " 
		else 
			echo_failure "$res is not an integer" "$fail"
			res=255
			first=0
		fi
	done
	eval $variable=${array[$res]}
	return 0
}

#----
## Define where is Centreon etc (config) directory
## @Globals	CENTREON_ETC, DEFAULT_CENTREON_ETC
#----
function locate_centreon_etcdir() {
	if [ -z "$CENTREON_ETC" ] ; then
		answer_with_createdir "Where is your Centreon etc directory" "$DEFAULT_CENTREON_ETC" "CENTREON_ETC"
		echo_success "Path $CENTREON_ETC" "$ok"
	elif [ ! -d "$CENTREON_ETC" -a "$silent_install" -eq 1 ] ; then
		mkdir -p "$CENTREON_ETC"
		log "INFO" "Create $CENTREON_ETC"
	fi
	CENTREON_ETC=${CENTREON_ETC%/}
	export CENTREON_ETC
	log "INFO" "CENTREON_ETC: $CENTREON_ETC"
}

#----
## Define where is centreon install directory 
## @Globals	INSTALL_DIR_CENTREON, DEFAULT_INSTALL_DIR_CENTREON
#----
function locate_centreon_installdir() {
	if [ -z "$INSTALL_DIR_CENTREON" ] ; then
		answer_with_createdir "Where is your Centreon directory?" "$DEFAULT_INSTALL_DIR_CENTREON" "INSTALL_DIR_CENTREON"
		echo_success "Path" $INSTALL_DIR_CENTREON" "$ok"
	elif [ ! -d "$INSTALL_DIR_CENTREON" -a "$silent_install" -eq 1 ] ; then
		mkdir -p "$INSTALL_DIR_CENTREON"
		log "INFO" "Create $INSTALL_DIR_CENTREON"
	fi	
	INSTALL_DIR_CENTREON=${INSTALL_DIR_CENTREON%/}
	export INSTALL_DIR_CENTREON
	log "INFO" "INSTALL_DIR_CENTREON: $INSTALL_DIR_CENTREON"
}

#----
## Check if variable do not have most possibility
## @param	variable to check
## @return 0	True
## @return 1	False
#----
function is_single() {
	local var="$1"

	local count=0
	for value in $var ; do
		let "count += 1"
	done

	if [ "$count" -eq 1 ] ; then
		return 0
	else 
		return 1
	fi
}

#----
## Find Apache user
## @Globals	WEB_USER, DIR_APACHE, APACHE_CONF
#----
function check_user_apache()
{
	# init WEB_USER if not define
	WEB_USER="$WEB_USER"

	if [ -n "$WEB_USER" ] ; then 
		echo_info "Finding Apache user :" "$WEB_USER"
		return 0
	fi
	local found=0
	if [ -e /etc/apache2/envvars ] ; then 
		log "INFO" "Use envvars file for apache user"
		# for Debian system (lenny)
		WEB_USER=`${CAT} /etc/apache2/envvars |${GREP} "USER" | cut -d= -f2`
		if [ -z "$WEB_USER" ] ; then 
			found=0
		else 
			found=1
		fi
	elif [ -e /etc/apache2/uid.conf ] ; then
		log "INFO" "Use uid.conf file for apache user"
		# for SuSe system
		WEB_USER=`${CAT} /etc/apache2/uid.conf |${GREP} -e "^User" | cut -d" " -f2`
		if [ -z "$WEB_USER" ] ; then 
			found=0
		else 
			found=1
		fi
	fi 
	if [ "$found" -eq 0 ] ; then 
		WEB_USER=`${CAT} $DIR_APACHE/$APACHE_CONF | ${GREP} -e "^User" | cut -d" " -f2`
		if [ -z "$WEB_USER"  ] ; then
			local WEB_USER_TEMP=""
			for fichier in $DIR_APACHE/*
			do
				if [ -f "$fichier" ] ; then
					log "INFO" "check apache user in : $fichier"
					WEB_USER_TEMP=`${CAT} $fichier | ${GREP} -e "^User" | cut -d" " -f2`
					if [ -n "$WEB_USER_TEMP" ] ; then
						log "INFO" "found apache user in : $fichier"
						WEB_USER=$WEB_USER_TEMP
					fi
				fi
			done
		fi
	fi
	echo_info "Finding Apache user :" "$WEB_USER"
	return 0
}

#----
## Find Apache group
## @Globals	WEB_GROUP, DIR_APACHE, APACHE_CONF
#----
function check_group_apache()
{
	# init WEB_GROUP if not define
	WEB_GROUP="$WEB_GROUP"

	if [ -n "$WEB_GROUP" ] ; then 
		echo_info "Finding Apache group :" "$WEB_GROUP"
		return 0
	fi
	local found=0
	if [ -e /etc/apache2/envvars ] ; then
		# for debian system
		WEB_GROUP=`${CAT} /etc/apache2/envvars |${GREP} "GROUP" |cut -d= -f2`
		if [ -z "$WEB_GROUP" ] ; then 
			found=0
		else 
			found=1
		fi
	elif [ -e /etc/apache2/uid.conf ] ; then
		# for SuSe system
		WEB_GROUP=`${CAT} /etc/apache2/uid.conf |${GREP} -e "^Group" | cut -d" " -f2`
		if [ -z "$WEB_GROUP" ] ; then 
			found=0
		else 
			found=1
		fi
	fi
	if [ "$found" -eq 0 ] ; then 
		WEB_GROUP=`${CAT} $DIR_APACHE/$APACHE_CONF | ${GREP} -e "^Group" | cut -d" " -f2`
		if [  -z "$WEB_GROUP"  ] ; then
			local WEB_GROUP_TMP=""
			for fichier in $DIR_APACHE/*
			do
				if [ -f "$fichier" ];	then
					WEB_GROUP_TEMP=`${CAT} $fichier | ${GREP} -e "^Group" | cut -d" " -f2`
					if [ -n "$WEB_GROUP_TEMP" ]; then
						WEB_GROUP=$WEB_GROUP_TEMP
					fi
				fi
			done
		fi
	fi
	echo_info "Finding Apache group :" "$WEB_GROUP"
	return 0
}


#----
## Copy Source directory on temporary working directory
## Copy Source directory and prepare work and final
## @Globals	TMPDIR
#----
function copyInTempFile()
{
	local srclistcp="bin cron doc GPL_LIB lib snmptrapd snmptt www plugins"
	# Prepare centreon Plugins
	echo "Preparing Centreon temporary files"
	if [ -d $TMPDIR ] ; then
		echo_passed "$TMPDIR "exists, it will be moved..."
		mv $TMPDIR $TMPDIR.`date +%Y%m%d-%k%m%S`
	fi
	mkdir -p $TMPDIR/src
	mkdir -p $TMPDIR/work
	mkdir -p $TMPDIR/final

	for folder in $srclistcp ; do
		log "INFO" "Copy $BASE_DIR/$folder $TMPDIR/src/"
		cp -Rf $BASE_DIR/$folder $TMPDIR/src/ 
	done
}	

#----
## Check space left for working directory
## @return 0	Space ok
## @return 1	No Space left
## @Globals	TMPDIR
#----
function check_tmp_disk_space() {
	local min_space="35584"
	local free_space=""
	local tmp_dir=""

	tmp_dir=$(dirname $TMPDIR)

	free_space=$(df -P $tmp_dir | tail -1 | awk '{print $4}')

	if [ "$free_space" -lt "$min_space" ] ; then
		echo_failure "No space left on tmp dir : $tmp_dir  (<$min_space Ko)" "$fail"
		return 1
	else
		return 0
	fi
}

#----
## Ask to remove all temporaries working directory
## @return 0	remove done
## @return 1	don't remove (abort by user)
## @Globals	TMPDIR, yes
#----
function purge_centreon_tmp_dir() {
	local not_clean="1"
	while [ $not_clean -ne 0 ] ; do
		yes_no_default "Do you want me to remove the centreon temporary working space to continue installation ?" "$yes"
		if [ "$?" -eq 0 ] ; then 
			local tmp_base_dir=`dirname $TMPDIR`
			local tmp_dir=`basename $TMPDIR`
			find $tmp_base_dir -name "$tmp_dir*" -type d \
				-exec rm -rf {} \;
			not_clean="0"
		else
			return 1
		fi
	done
	return 0
}

#----
## Find file with macro in directory.
## @param	macro (separate with comma)
## @param 	directoty where to find
## @param	sub directory to find
## @param	file to search (possible to use pattern)
## @param	variable where define a list of file (temporaty file)
## @Globals	LOG_FILE, TMP_DIR
#----
function find_macros_in_dir() {
	local macro="$1"
	local src_dir="$2"
	local sub_dir="$3"
	local file="$4"
	local var_ref="$5"
	local file_out_tmp=""
	file_out_tmp=$(mktemp $TMP_DIR/file_out_tmp.XXXXXX)
	
	for mac in ${macro//,/ } ; do
		log "INFO" "Search file for macro : $mac"
		( cd $src_dir ;
			find $sub_dir -mindepth 1 -type f -name "$file" | \
				xargs ${GREP} "$mac" | \
				cut -d: -f1 | \
				uniq >> "$file_out_tmp" 2>>"$LOG_FILE";
		)
	done

	eval $var_ref=$file_out_tmp
	return 0
}

#----
## Check result and print a message
## @param	return code to check
## @param	message to print
#----
function check_result() {
	local code=$1
	shift
	local message=$@

	if [ $code -eq 0 ] ; then
		echo_success "$message" "$ok"
	else
		echo_failure "$message" "$fail"
	fi
	return 0
}


#---
## {Replace Macros}
##
## @Stdout Actions realised by function
## @Stderr Log into $LOG_FILE
#----
function replace_macro() {
		`sed -e 's|@NAGIOS_PLUGINS@|'"$NAGIOS_PLUGIN"'|g' \
		-e 's|@INSTALL_DIR_CENTREON@|'"$INSTALL_DIR_CENTREON"'|g' \
		-e 's|@DB_BASE@|'"$DB_BASE"'|g' \
		-e 's|@DB_CENTSTORAGE@|'"$DB_CENTSTORAGE"'|g' \
		-e 's|@DB_HOST@|'"$DB_HOST"'|g' \
		-e 's|@DB_USER@|'"$DB_USER"'|g' \
		-e 's|@NAGIOS_VAR@|'"$NAGIOS_VAR"'|g' \
		-e 's|@CENTREON_VARLIB@|'"$CENTREON_VARLIB"'|g' \
		-e 's|@NAGIOS_PLUGIN@|'"$NAGIOS_PLUGIN"'|g' \
		-e 's|@LOG_DIR_CENTREON@|'"$LOG_DIR_CENTREON"'|g' \
		-e 's|@DB_PASSWORD@|'"$DB_PASSWORD"'|g' \
		-e 's|@CENTREON_ETC@|'"$CENTREON_CONF"'|g' \
	    "$1" > "${1}2"`
	    `mv ${1}2 $1`
}
